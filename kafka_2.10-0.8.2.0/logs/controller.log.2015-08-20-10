[2015-08-20 10:55:40,975] INFO [Controller 0]: Controller starting up (kafka.controller.KafkaController)
[2015-08-20 10:55:41,151] INFO [Controller 0]: Broker 0 starting become controller state transition (kafka.controller.KafkaController)
[2015-08-20 10:55:41,165] INFO [Controller 0]: Initialized controller epoch to 1 and zk version 0 (kafka.controller.KafkaController)
[2015-08-20 10:55:41,175] INFO [Controller 0]: Controller 0 incremented epoch to 2 (kafka.controller.KafkaController)
[2015-08-20 10:55:41,221] INFO [Controller 0]: Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2015-08-20 10:55:41,222] INFO [Controller 0]: Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2015-08-20 10:55:41,223] INFO [Controller 0]: Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2015-08-20 10:55:41,227] INFO [Controller 0]: Partitions being reassigned: Map() (kafka.controller.KafkaController)
[2015-08-20 10:55:41,227] INFO [Controller 0]: Partitions already reassigned: List() (kafka.controller.KafkaController)
[2015-08-20 10:55:41,228] INFO [Controller 0]: Resuming reassignment of partitions: Map() (kafka.controller.KafkaController)
[2015-08-20 10:55:41,233] INFO [Controller 0]: List of topics to be deleted:  (kafka.controller.KafkaController)
[2015-08-20 10:55:41,234] INFO [Controller 0]: List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2015-08-20 10:55:41,240] INFO [Controller 0]: Currently active brokers in the cluster: Set() (kafka.controller.KafkaController)
[2015-08-20 10:55:41,241] INFO [Controller 0]: Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2015-08-20 10:55:41,242] INFO [Controller 0]: Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2015-08-20 10:55:41,255] INFO [Replica state machine on controller 0]: Started replica state machine with initial state -> Map() (kafka.controller.ReplicaStateMachine)
[2015-08-20 10:55:41,287] INFO [Partition state machine on Controller 0]: Started partition state machine with initial state -> Map() (kafka.controller.PartitionStateMachine)
[2015-08-20 10:55:41,288] INFO [Controller 0]: Broker 0 is ready to serve as the new controller with epoch 2 (kafka.controller.KafkaController)
[2015-08-20 10:55:41,290] INFO [Controller 0]: Starting preferred replica leader election for partitions  (kafka.controller.KafkaController)
[2015-08-20 10:55:41,292] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions  (kafka.controller.PartitionStateMachine)
[2015-08-20 10:55:41,302] INFO [Controller 0]: starting the partition rebalance scheduler (kafka.controller.KafkaController)
[2015-08-20 10:55:41,303] INFO [Controller 0]: Controller startup complete (kafka.controller.KafkaController)
[2015-08-20 10:55:41,659] INFO [BrokerChangeListener on Controller 0]: Broker change listener fired for path /brokers/ids with children 0 (kafka.controller.ReplicaStateMachine$BrokerChangeListener)
[2015-08-20 10:55:41,719] INFO [BrokerChangeListener on Controller 0]: Newly added brokers: 0, deleted brokers: , all live brokers: 0 (kafka.controller.ReplicaStateMachine$BrokerChangeListener)
[2015-08-20 10:55:41,721] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2015-08-20 10:55:41,789] INFO [Controller-0-to-broker-0-send-thread], Controller 0 connected to id:0,host:192.168.1.6,port:9092 for sending state change requests (kafka.controller.RequestSendThread)
[2015-08-20 10:55:41,790] INFO [Controller-0-to-broker-0-send-thread], Starting  (kafka.controller.RequestSendThread)
[2015-08-20 10:55:41,819] INFO [Controller 0]: New broker startup callback for 0 (kafka.controller.KafkaController)
[2015-08-20 10:55:46,305] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2015-08-20 10:55:46,308] DEBUG [Controller 0]: preferred replicas by broker Map() (kafka.controller.KafkaController)
